#!/bin/bash
export TTY

# See also: 'f' find commands

# shopt -s nullglob # use for 'for' loops but not for 'ls', 'grep'

# find commands

is_stdout_tty() {
    [[ -t 1 ]]
}

stdin_exists() {
    ! [ -t 0 ]
}

HAS_STDIN=
if stdin_exists; then
    HAS_STDIN=y
    tf_input="$(nix tf input || echo /dev/null)"
    trap "rm \"$tf_input\" 2>/dev/null" 0
fi

opt="$1"
shift
case "$opt" in
    find-file-repo) {
        file="$1"

        cd "$(vc get-top-level)"
        F find-no-git "$file" | fzf

        exit 0
    }
    ;;
    
    bs|broken-symlinks|derefed-syms) {
        find `pwd -P` -xtype l
        # find `pwd -P` -type l ! -exec test -e {} \; -print
    }
    ;;

    newest|find-newest-files) {
        # tm n "$f :: NOT IMPLEMENTED"

        $0 recently-modified-here "$@"
    }
    ;;

    recently-modified-here) {
        find . -path '*/.git/*' -prune -o -type f -printf '%T@ %p\n' | sort -n | cut -f2- -d" " | sed s/^..// | tac
    }
    ;;

    find-here) {
        find . -mindepth 1 -maxdepth 1 "$@" | sed 's/^\.\///'
    }
    ;;

    find-files-here) {
        find . -mindepth 1 -maxdepth 1 -type f "$@" | sed 's/^\.\///'
    }
    ;;

    find-dirs-here) {
        find . -mindepth 1 -maxdepth 1 -type d "$@" | sed 's/^\.\///'
    }
    ;;

    fng|find-no-git) {
        # f fng "*gf*"

        predicate_name="path"
        predicate_list= # extra predicates

        while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
            -i) {
                predicate_name="ipath"
                shift
            }
            ;;

            -d) {
                predicate_list+=" -a -type d"
                shift
            }
            ;;

            -*:*) {
                min_depth="$(p "$opt" | mcut -d'[-+:]' -f2)"
                max_depth="$(p "$opt" | mcut -d'[-+:]' -f3)"
                shift
            }
            ;;

            -f) {
                predicate_list+=" -a -type f"
                shift
            }
            ;;

            *) break;
        esac; done

        pattern="$1"

        : ${min_depth:="1"}
        : ${max_depth:="1000"}

        # Remember that -prune prunes what's before it and -print prints
        # what's before it

        # f z sucks
        # | f z

        if [ -n "$pattern" ]; then
            eval "find -L . -mindepth "$min_depth" -maxdepth "$max_depth" -$predicate_name '*/.git/*' -prune -o \\( -true $predicate_list -a -name \"$pattern\" \\) -print 2>/dev/null"
        else
            eval "find -L . -mindepth "$min_depth" -maxdepth "$max_depth" -$predicate_name '*/.git/*' -prune -o \\( -true $predicate_list -a \\( -type f -o -type d \\) \\) -print 2>/dev/null"
        fi
    }
    ;;

    f|files|find-files-no-git) {
        # f fng

        # technically, I could also be using "F find-no-git -f"

        while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
            -0) {
                print0="y"
                shift
            }
            ;;

            *) break;
        esac; done

        CWD="$1"

        : ${CWD:="$(pwd)"}

        cd /

        # Can definitely not do -L here. Forbit it with -H.
        sudo find -H "$CWD" \
            -mindepth 1 \
            -type d -o \
            -regex '^/sys' -o \
            -regex '^/export/bulk' -o \
            -regex '^/dev' -o \
            -regex '^/proc' -o \
            -path '*/vim-old*' -o \
            -path '*/.git*' -o \
            -path '*/.hg*' -o \
            -name '*.o' -o \
            -name '*.png' -o \
            -name '*.glif' \
            -prune -o \
            -type f \
            -print$(test "$print0" = "y" && p 0)

         ` # -name '*.jpg' -prune -o `
    }
    ;;

    d|dirs|find-dirs-no-git) {
        # f fng

        while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
            -0) {
                print0="y"
                shift
            }
            ;;

            *) break;
        esac; done

        CWD="$1"

        : ${CWD:="$(pwd)"}

        cd /

        # Can definitely not do -L here. Forbit it with -H.
        sudo find -H "$CWD" \
            -mindepth 1 \
            -type f -o \
            -regex '^/sys' -o \
            -regex '^/export/bulk' -o \
            -regex '^/dev' -o \
            -regex '^/proc' -o \
            -path '*/vim-old*' -o \
            -path '*/.git*' -o \
            -path '*/.hg*' -o \
            -name '*.o' -o \
            -name '*.png' -o \
            -name '*.glif' \
            -prune -o \
            -type d \
            -print$(test "$print0" = "y" && p 0)

         ` # -name '*.jpg' -prune -o `
    }
    ;;

    fang|find-all-no-git) {
        # f fng

        while [ $# -gt 0 ]; do opt="$1"; case "$opt" in
            -0) {
                print0="y"
                shift
            }
            ;;

            *) break;
        esac; done

        CWD="$1"

        : ${CWD:="$(pwd)"}

        cd /

        # Remember that -prune prunes what's before it and -print prints
        # what's before it

        # | fzf --sync


        # find [path] [conditions to prune] -prune -o \
        #                                    [your usual conditions] [actions to perform]

        # Can definitely not do -L here. Forbit it with -H.
        sudo find -H "$CWD" \
            -mindepth 1 \
            -type d -o \
            -regex '^/sys' -o \
            -regex '^/export/bulk' -o \
            -regex '^/dev' -o \
            -regex '^/proc' -o \
            -path '*/vim-old*' -o \
            -path '*/.git*' -o \
            -path '*/.hg*' -o \
            -name '*.o' -o \
            -name '*.png' -o \
            -name '*.glif' \
            -prune -o \
            -type f \
            -print$(test "$print0" = "y" && p 0)

         ` # -name '*.jpg' -prune -o `

        # db mysql "select * from alltable order by id desc limit 10;" | v
    }
    ;;

    x|findexec) {
        find . -mindepth 1 -executable -type f
    }
    ;;

    locate) {
        if stdin_exists; then
            input="$(cat)"
        else
            input="$1"
        fi
        locate "$input" | v

        exit 0
    }
    ;;

    *)
esac
