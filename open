#!/bin/bash

( hs "$(basename "$0")" "$@" 0</dev/null ) &>/dev/null

set -m

editor() {
    if e running; then
        e c "$1"
    else
        v "$1"
    fi
}


# Accepts:
#   path, url (from argument or *stdin*)

# pdf -> z
# org -> sp
# office doc -> libreoffice


# If you are looking for $HOME/scripts/get, please go there
# instead.

# Ranger never calls the rifle executable
# It uses a library. I must change the source code of ranger if I want
# to plant this script in before rifle.

#invocation="$0 $@"
#lit "$invocation"
#exit 0

WAIT=n
WHICH=y
PREFER_EDIT=n

# Definitely make it so this function has its input filtered through a
# scrape files script but make that happen inside the lisp for:
# $EMACSD/shane-minor-mode.el

# notify-send -- "$CMD"
# exit 0

stdin_exists() {
    ! [ -t 0 ]
}

NOCD=n

opt="$1"
case "$opt" in
    -w|-wait) {
        WAIT=y
        shift
    }
    ;;

    -nocd) {
        NOCD=y
        shift
    }
    ;;

    -nw|-nowhich) {
        WHICH=n
        shift
    }
    ;;

    -e|-edit) {
        PREFER_EDIT=y
        shift
    }
    ;;

    -t) {
        shift

        # CMD="$(lit -n "$CMD" | qne)"
        # lit "$CMD" | tp vipe

        #tm nw -pak "echo $CMD"

        CMD="$(cmd "$@")"

        tm n "echo $CMD"

        # tm -d -t nw "open $CMD"

        # eval "tm nw \"open $CMD\""

        shift

        exit $?
    }
    ;;

    *)
esac

CMD="$(cmd "$@")"

if stdin_exists; then
    fp="$(umn)"
    exec </dev/tty
else
    fp="$(p "$CMD" | umn)"
fi

fp="$(eval echo -e "$fp")" # expand

lit "$fp" > /tmp/open2.txt

if [ -z "$fp" ]; then
    exit 1
fi

if lit "$fp" | grep -q -P '^file://'; then
    case "$fp" in
        *racket*) {
            fp="$(p "$fp" | fix-racket-doc-url)"
            
            copy "$fp"
            # ff-view "$fp"
        }
        ;;
    esac
    exit 0
fi

if lit "$fp" | grep -q -P '^https?://'; then
    case "$fp" in
        *youtube.com*) {
            sh-yt "$fp"
            # yt -v "$fp"
        }
        ;;

        *//github.com/*) {
            if pl "$fp" | grep -q -P '/pull/[0-9]+'; then

                fp="$(p "$fp" | sed 's=\(/pull/[0-9]\+\).*=\1=')"

                prid="$(p "$fp" | sed 's/.*[^0-9]\([0-9]\+\)$/\1/')"

                # DONE make this repo-agnostic
                # cd $HOME/source/git/codelingo/codelingo

                newdir="$(gc -notty "$fp" 2>/dev/null)"

                ! test "$NOCD" = "y" && cd "$newdir"

                git branch -D "pr-${prid}"

                git fetch origin pull/$prid/head:pr-$prid
                git checkout pr-$prid

                # CWD="$(pwd)" zsh
                x -cd "$(pwd)" -sh "zsh" -s "go-to-dir-of-change" -c m -i
            else
                gc "$fp"
            fi
        }
        ;;

        *gobyexample*) {
            eww "$fp"
        }
        ;;

        *) {
            # open is used by fzf. to keep the filters going I can use
            # this. it's also kinda fast. use ca instead of elinks-dump
            # ca -nt "$fp" | tless
            # ca "$fp" | tless

            # But now ff gives me a choice, which is better
            ff "$fp"
        }
        ;;
    esac
    exit 0
elif lit "$fp" | grep -q -P '^magnet:?'; then
    case "$fp" in
        magnet:*) {
            tm -d nw -fargs rt "$fp" &
        }
        ;;
    esac
    exit 0
elif lit "$fp" | grep -q -P '^[A-Za-z0-9_]{20}$'; then
    cl-lucene "_id:$fp"
    exit 0
fi


opt="$1"
case "$opt" in
    -nw)
        :
        shift
    ;;
esac


bn="$(basename "$fp")"
ext="${fp##*.}"
fn="${fp%.*}"

ofp="$fp"

if ! [ -e "$fp" ] && ! test "$WHICH" = "n"; then
    fp="$(which "$fp")"
fi

# tm n "$fp"
# lit "'$fp'"
# exit 0

# lit "$fp" > /tmp/open2.txt

if [ -e "$fp" ]; then
    rp="$(realpath "$fp")"

    case "$ext" in
        org) {
            org e "$fp"
            exit $?
        }
        ;;

        mkv) {
            vlc "$fp" &
            exit $?
        }
        ;;

        pdf) {
            z "$fp" & disown
            exit $?
        }
        ;;

        php|md|mmd) {
            sp c "$fp"
            exit $?
        }
        ;;

        emacs|el|lisp|cl) {
            sp c "$fp"
            exit $?
        }
        ;;

        template) {
            :
        }
        ;;

        *)
    esac

    if test "$bn" = "tmux.conf"; then
        # tm -tout -d nw -n "sp-$bn" "sp \"$rp\""
        sp "$rp"
        exit 0
    fi

    if tt -t "$rp"; then
        if lit "$rp" | grep -q -P '\.org$' && e -D spacemacs running; then
            #tm -tout -d nw -n "e-$bn" "e -D spacemacs c \"$rp\""
            e -D spacemacs c "$rp"
        else
            #tm -tout -d nw -n "v-$bn" "v \"$rp\""

            # It's a text file

            #v "$rp"
            rifle "$rp"
        fi

        exit 0

    elif tt "$rp" -mt "/pdf"; then
        if test "$WAIT" = "y"; then
            z "$rp"
        else
            z "$rp" & disown
        fi

        exit $?

    elif tt "$rp" -mt "officedoc"; then
        libreoffice "$rp"

        exit $?

    elif tt "$rp" -mt "/directory"; then
        #xt tm ns -S ranger "$rp" ranger

        # Don't use xterm here because ge in vim will open an xterm

        # tm -t -d sph -c "$rp" ranger

        CWD="$rp" ranger

        # (
        # xt tm ns "$bn/" "$rp" ranger
        # ) & disown
        # sleep 0.5 # Not sure why removing this sleep may kill xterm as it's starting

        exit $?
    fi
fi

# lit "($ofp) File doesn't exist or mimetype not known"

mts="$(mt "$rp")"

{
    # annoyingly, vimrc files sometimes have control characters, causing
    # this
    if test "$mts" = "application/octet-stream"; then
         rifle "$rp"
         exit 0
    fi

    if test "$PREFER_EDIT" = "y"; then
        #e -D spacemacs c "$rp"

        # vim handles binary files better, I think

        #v "$rp"
        rifle "$rp"

        exit $?
    else
        lit "scripts/open: Unknown file type:"
        lit "$(mt "$rp")"

        exit 1
    fi

} 1>&2

## worst case scenario, ask ranger to open it.