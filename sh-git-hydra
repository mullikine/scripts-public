#!/bin/bash
export TTY

# go get github.com/github/hub && cd "$GOPATH"/src/github.com/github/hub; sudo make install

# exec 1> >(mnm)

git_abort() {
    # make this also work for merge
    git rebase --abort
}

fzf_cmd() {
    sel="$(fqa 'git remotes' 'hub pull-request # open PR' | sed 's/#.*//' )"

    echo

    if [ -n "$sel" ]; then
        printf -- "%s\n" "Running: $sel Â»" 1>&2
        eval "$sel"
    fi
}

# I should turn this entire script into an elisp hydra.
# Although that would require that emacs has been started alreaddy.

read -r -d '' options <<HEREDOC
.   EDIT
l   git log
L   magit log
d   git log
F   git fetch -a; git remote | xa nofail git fetch 2>/dev/null
D   git-touched-files-since-divergence | fzf -m -p
P   gh pr
r   sh-git-reset
R   git pull --rebase origin master
s   git status
m   magit
C   git clean -xfd .; git reset --hard HEAD
M   cd "\$(vc get-top-level)" && git checkout master
S   vc list-submodule-paths
i   issues
f   fork
W   git-clone-wiki
X   abort
-   git clean -xfd .; git reset --hard HEAD"
^   git reset --soft HEAD\^
H   pwd; ynx -E "git add -A .; git reset --hard HEAD"
+   git reset --hard HEAD
,z  fzf_cmd
h   magithub
y   yank last commit as patch
a   apply clipboard patch
c   git diff --cached
g   get git remote url
2   cl-git-pull-this-on-pipeline
HEREDOC

echo "$0" | udl
echo "$options"

# I want to detect M-m
#while true; do
#    line=''
#
#    while IFS= read -r -N 1 ch; do
#        case "$ch" in
#            "")   got_esc=1   ;&
#            $'\n')  break       ;;
#            *)      line="$line$ch" ;;
#        esac
#    done
#
#    printf 'line: "%s"\n' "$line"
#
#    if (( got_eot )); then
#        break
#    fi
#done

read -n1 d
# clear

case "$d" in
    .) cmd="v $0" ;;
    m) { cmd="magit"; }; ;;
    C) { cmd="git clean -xfd .; git reset --hard HEAD"; }; ;;
    M) { cmd="cd $(aqf "$(vc get-top-level)") && git checkout master && zcd ."; }; ;;
    W) { cmd="git-clone-wiki"; }; ;;
    F) { cmd="git fetch -a; git remote | xa nofail git fetch 2>/dev/null"; }; ;;
    S) { cmd="vc list-submodule-paths | fzf | u rp | xc -n -i"; }; ;;
    r) { cmd="sh-git-reset"; } ;;
    R) { cmd="git pull --rebase origin master"; }; ;;
    i) { cmd="hub browse -- issues"; }; ;;
    f) { cmd="hub fork"; }; ;;
    ,|z) { cmd="fzf_cmd"; }; ;;
    h) { cmd="magithub"; }; ;;
    l) { cmd="git log"; }; ;;
    D) { cmd="git-touched-files-since-divergence | fzf -m -p"; }; ;;
    # P) { cmd="gh pr"; }; ;;
    P) { cmd="fzf-pr"; }; ;;
    H) { cmd="pwd; ynx -E \"git add -A .; git reset --hard HEAD\""; }; ;;
    s) { cmd="git status"; }; ;;
    L) { cmd="magit log"; }; ;;
    -) { cmd="git clean -xfd .; git reset --hard HEAD\\^"; }; ;;
    \^) { cmd="git reset --soft HEAD\\^"; }; ;;
    \+) { cmd="yn && git reset --hard HEAD"; }; ;;
    d) { cmd="git diff"; }; ;;
    X) { cmd="git_abort"; }; ;;
    y) { cmd="git diff | xc -i"; }; ;;
    a) { cmd="xc | patch -b -p 1 2>(ns)"; }; ;;
    c) { cmd="git diff --cached"; }; ;;
    g) { cmd="git config --get remote.origin.url | xc -n -i -"; }; ;;
    2) { cmd="cl-git-pull-this-on-pipeline"; }; ;;
esac
echo
echo "$cmd"

# exec </dev/tty
# exec 1> /dev/tty
eval "$cmd"
